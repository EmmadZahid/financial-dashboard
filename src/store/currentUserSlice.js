import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";

const initialState = {
  currentUser: null,
  loading: false,
  error: null,
};

export const fetchCurrentUser = createAsyncThunk(
  "currentUser/fetchCurrentUser",
  async () => {
    const response = await fetch("/currentUser");
    const data = await response.json();
    return data;
  }
);

// Create the slice
const currentUserSlice = createSlice({
  name: "currentUser",
  initialState,
  reducers: {
    updateCurrentUserImage(state, action) {
      state.currentUser.imageUrl = action.payload;
    },
  },
  extraReducers: (builder) => {
    // Handle the actions generated by createAsyncThunk
    builder
      .addCase(fetchCurrentUser.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchCurrentUser.fulfilled, (state, action) => {
        state.loading = false;
        state.currentUser = action.payload;
      })
      .addCase(fetchCurrentUser.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message;
      });
  },
});

export const { updateCurrentUserImage } = currentUserSlice.actions; // Export the action
export default currentUserSlice.reducer;
