import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";

const initialState = {
  recentTransactions: [],
  isFetched: false,
  loading: false,
  error: null,
};

export const fetchRecentTransactions = createAsyncThunk(
  "recentTransactions/fetchRecentTransactions",
  async () => {
    const response = await fetch("/recentTransactions");
    const data = await response.json();
    return data;
  }
);

// Create the slice
const recentTransactionsSlice = createSlice({
  name: "recentTransactions",
  initialState,
  reducers: {
    addTransaction(state, action) {
      state.recentTransactions.unshift(action.payload); // Push the new item to the list
    },
  },
  extraReducers: (builder) => {
    // Handle the actions generated by createAsyncThunk
    builder
      .addCase(fetchRecentTransactions.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchRecentTransactions.fulfilled, (state, action) => {
        state.loading = false;
        state.recentTransactions = action.payload;
        state.isFetched = true;
      })
      .addCase(fetchRecentTransactions.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message;
      });
  },
});

export const { addTransaction } = recentTransactionsSlice.actions; // Export the action
export default recentTransactionsSlice.reducer;
